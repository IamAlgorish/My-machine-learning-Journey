round(5060.0, -3)
5000.0
Solution: As you've seen, ndigits=-1 rounds to the nearest 10, ndigits=-2 rounds to the nearest 100 and so on. 
Where might this be useful? Suppose we're dealing with large numbers:

The area of Finland is 338,424 km²
The area of Greenland is 2,166,086 km²
We probably don't care whether it's really 338,424, or 338,425, or 338,177. 
All those digits of accuracy are just distracting. We can chop them off by calling round() with ndigits=-3:
The area of Finland is 338,000 km²
The area of Greenland is 2,166,000 km²
========================================================
Libraries and directaries
========================================================
from math import *
from numpy import *
print(pi, log(32, 2))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_19/3018510453.py in <module>
      1 from math import *
      2 from numpy import *
----> 3 print(pi, log(32, 2))

TypeError: return arrays must be of ArrayType
------------------------------------------------------------------------------
What has happened? It worked before!

These kinds of "star imports" can occasionally lead to weird, difficult-to-debug situations.

The problem in this case is that the math and numpy modules both have functions called log,
but they have different semantics. Because we import from numpy second, its log overwrites (or "shadows") the log variable we imported from math.

# Roll 10 dice
rolls = numpy.random.randint(low=1, high=6, size=10)
rolls
array([3, 4, 3, 4, 5, 5, 2, 1, 3, 3])
