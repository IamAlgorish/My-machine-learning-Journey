Polymorphism is a core concept in Object-Oriented Programming(OOP) that allows objects of different classes
to be treated as objects of a common superclass. It provides a way to perform a single action in different forms.
Polymorphism is typically achieved through method overriding and interfaces.

### Method  overriding allows a child class to provide a specific implementation of a method that is already
defined in its parent class.


class Shape:
    def area(self):
        return "The area of the shape"

class Rectangle(Shape):
    def __init__(self, length, breadth):
        self.length = length
        self.breadth = breadth

    def area(self):
        return self.length * self.breadth

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

# Using function for polymorphism
def print_area(shape):
    print(f"The area is = {shape.area()}")

rectangle1 = Rectangle(2, 4)
circle1 = Circle(3)

print_area(rectangle1)
print_area(circle1)
 ======================
|         OUTPUT:      | 
 ======================                      |
| The area is = 8      |
| The area is = 28.26  |
=======================
#Polymorphism with Abstract Base Classes

Abstract Base Classes(ABCs) are used to define common methods for a group of related objects. They can 
enforce that derived classes implement particular methods, promoting consistency across different
implementations.

from abc import ABC,abstractmethod
class Vehicle(ABC):

    @abstractmethod
    def start_engine(self):
       pass
## Derived class 1
class Car(Vehicle):
    def start_engine(self):
       return "Car engine started" 
class MotorCycle(Vehicle):
    def start_engine(self)
        return "Motor enine started"
def start_vehicle(Vehicle)
        print(Vehicle.start_engine())
## create objects for Car and Motorcycle
car = CAR()
start_vehicle(car)

========================================================================================================
### Conclusion
Polymorphism is a powerful fearture of oop that allows for flexibility and integration in code design.
It enables a single function to handle objects of different classes, each with its own implementation
of a method. By understanding and applying polymorphism, you can create more extensible and maintainable
object-oriented programs.
========================================================================================================
